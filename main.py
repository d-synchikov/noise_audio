import matplotlib.pyplot as plt
import re
import speech_recognition as sr
import requests
import io
from pydub import AudioSegment
import numpy as np
import gdown
import librosa
import soundfile as sf
from jiwer import wer, cer
from IPython.display import Audio

#—Å–ø–∏—Å–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
wer_data = []
cer_data = []



def load_file(url):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫
    """
    url = url
    output = 'file_to_conwert.mp3'
    target_url = 'https://drive.google.com/uc?export=download&id='+(re.split(r'd/',(re.split(r'/v', url )[0]))[1])
    gdown.download(target_url, output)
    file_path = '/content/file_to_conwert.mp3'
    return file_path



def download_and_convert_audio(file_path):
    """
     –ê—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª (Audio Signal):
    –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ WAV
    """

    audio = AudioSegment.from_file(file_path, format="mp3")
    wav_io = io.BytesIO()
    audio.export(wav_io, format='wav')
    wav_io.seek(0)
    return wav_io

def add_noise(file_path):
    """
    –î–æ–±—ã–≤–ª–µ–Ω–∏–µ —à—É–º–∞ –∫ –∑–∞–ø–∏—Å–∏
    """
    audio = AudioSegment.from_file(file_path, format="mp3")
    wav_io = io.BytesIO()
    audio.export(wav_io, format='wav')
    wav_io.seek(0)

    audio_data, sample_rate = librosa.load(wav_io, sr=None)


    # –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞
    noise_level = 0.02

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–ª–æ–≥–æ —à—É–º–∞
    white_noise = noise_level * np.random.normal(size=len(audio_data))

    # –ù–∞–ª–æ–∂–µ–Ω–∏–µ —à—É–º–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    noise_data = audio_data + white_noise
    #—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —à—É–º–æ–º
    sf.write("noized_audio.wav", noise_data, sample_rate)
    return"–®—É–º –¥–æ–±–∞–≤–ª–µ–Ω"

def recognize_poetry(audio_file):
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Feature Extraction) + –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å (Acoustic Model)
    –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ speech_recognition —Ä–µ–∞–ª–∏–∑—É–µ—Ç –±–ª–æ–∫–∏ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –ê–∫—É—Å—Ç–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å.
    """
    recognizer = sr.Recognizer()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    recognizer.energy_threshold = 300
    recognizer.dynamic_energy_threshold = True
    recognizer.pause_threshold = 0.8  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ—á–∏

    with sr.AudioFile(audio_file) as source:
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...")
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —É—Ä–æ–≤–Ω—è –æ–∫—Ä—É–∂–∞—é—â–µ–≥–æ —à—É–º–∞
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.record(source)

    try:
        # üîç –î–µ–∫–æ–¥–µ—Ä (Decoder):
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Speech Recognition, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –ø–æ –ª—É—á—É
        text = recognizer.recognize_google(audio, language="ru-RU")
        return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except sr.RequestError as e:
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"


def main(url):

    print("–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞...")
    file_path = load_file(url)
    wav_file = download_and_convert_audio(file_path)

    print("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
    recognized_text = recognize_poetry(wav_file)

    print("\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ:")

    print(recognized_text)

    print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞ –∫ –∞—É–¥–∏–æ")
    add_noise(file_path)

    print("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Ñ–∞–π–ª–∞ —Å —à—É–º–æ–º...")
    noised_text = recognize_poetry("/content/noized_audio.wav")


    print("\n–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ —Å —à—É–º–æ–º:")

    print(noised_text)

    print("\n–ú–µ—Ç—Ä–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∏—è (WER, CER)")

    wer_value = wer(recognized_text, noised_text)
    print(f"WER: {wer_value}")

    # –ü—Ä–∏–º–µ—Ä –≤—ã—á–∏—Å–ª–µ–Ω–∏—è CER
    cer_value = cer(recognized_text, noised_text)
    print(f"CER: {cer_value}")
    return wer_value, cer_value

#–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
wer_wal, cer_val = main('[FILE_LINK]')
wer_data.append(wer_wal)
cer_data.append(cer_val)
print('–û—Ä–∏–≥–∏–Ω–∞–ª')
wn = Audio('/content/file_to_conwert.mp3', autoplay=False)
display(wn)
print('–ó–∞–ø–∏—Å—å —Å —à—É–º–æ–º')
wn = Audio('/content/noized_audio.wav', autoplay=False)
display(wn)

#–í—ã–≤–µ–¥–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ—Ü–µ–Ω–æ–∫
samples = [[Track_numbers]]
plt.bar(samples, wer_data,width=0.5, align='edge', label='WER')
plt.bar(samples, cer_data,width=0.5, align='center', label='CER')
plt.xlabel('–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏')
plt.legend()
plt.show()